#!/usr/bin/env python3

# Main.py file generated by New Project wizard
# Created:   Mon Nov 4 2024
# Processor: RPI3/RPI4
# Compiler:  Python 3 (Proteus)

# Modules
import time
import pio  # Proteus-specific GPIO module
import resource
import var

# If Proteus supports standard GPIO libraries, uncomment the following lines
# import RPi.GPIO as GPIO
# import serial
# import pynmea2
# import adafruit_dht

# Initialize GPIO pins using Proteus-specific 'pio' module
# Replace 'pio' methods with appropriate Proteus GPIO handling functions

def setup():
    """
    Initialize all GPIO pins as inputs.
    """
    # IR Sensor Setup
    pio.set_mode(6, pio.INPUT)    # GPIO6 (Pin 31)

    # Flame Sensor Setup
    pio.set_mode(17, pio.INPUT)   # GPIO17 (Pin 11)

    # Vibration Sensor Setup
    pio.set_mode(22, pio.INPUT)   # GPIO22 (Pin 15)

    # Gas Sensor (MQ-2) Setup
    pio.set_mode(27, pio.INPUT)   # GPIO27 (Pin 13)

    # DHT11 Sensor Setup
    # Assuming Proteus handles DHT11 via a specific method or library
    # If using a standard library, initialize it here
    # Example:
    # dht_device = adafruit_dht.DHT11(4)  # GPIO4 (Pin 7)
    # return dht_device

def read_ir_sensor():
    """
    Read IR Sensor and return True if obstacle detected, else False.
    """
    ir_value = pio.input(6)  # GPIO6
    return True if ir_value else False

def read_flame_sensor():
    """
    Read Flame Sensor and return True if flame detected, else False.
    """
    flame_value = pio.input(17)  # GPIO17
    return True if not flame_value else False  # Assuming LOW indicates flame

def read_vibration_sensor():
    """
    Read Vibration Sensor and return True if vibration detected, else False.
    """
    vibration_value = pio.input(22)  # GPIO22
    return True if vibration_value else False

def read_gas_sensor():
    """
    Read Gas Sensor (MQ-2) and return True if gas detected, else False.
    """
    gas_value = pio.input(27)  # GPIO27
    return True if gas_value else False

def read_dht11():
    """
    Read DHT11 Sensor and return temperature and humidity.
    """
    # Replace with Proteus-specific DHT11 reading method
    # Example:
    # try:
    #     temperature = dht_device.temperature
    #     humidity = dht_device.humidity
    #     return temperature, humidity
    # except:
    #     return None, None
    return 25.0, 50.0  # Placeholder values for simulation

def read_gps():
    """
    Read GPS data and return latitude, longitude, and altitude.
    """
    # Replace with Proteus-specific GPS reading method
    # Example:
    # try:
    #     line = gps_serial.readline().decode('ascii', errors='replace')
    #     if line.startswith('$'):
    #         msg = pynmea2.parse(line)
    #         if isinstance(msg, pynmea2.types.talker.GGA):
    #             return msg.latitude, msg.longitude, msg.altitude
    # except:
    #     pass
    return 37.7749, -122.4194, 15.0  # Placeholder values for simulation

def main():
    """
    Main function to read all sensors and print their values.
    """
    setup()

    print("Sensor Initialization Complete. Starting data acquisition...\n")

    while True:
        # Read IR Sensor
        ir_detected = read_ir_sensor()
        print(f"IR Sensor: {'True' if ir_detected else 'False'}")

        # Read Flame Sensor
        flame_detected = read_flame_sensor()
        print(f"Flame Sensor: {'True' if flame_detected else 'False'}")

        # Read Vibration Sensor
        vibration_detected = read_vibration_sensor()
        print(f"Vibration Sensor: {'True' if vibration_detected else 'False'}")

        # Read Gas Sensor
        gas_detected = read_gas_sensor()
        print(f"Gas Sensor (MQ-2): {'True' if gas_detected else 'False'}")

        # Read DHT11 Sensor
        temperature, humidity = read_dht11()
        if temperature is not None and humidity is not None:
            print(f"DHT11 - Temperature: {temperature:.1f}Â°C  Humidity: {humidity:.1f}%")
        else:
            print("DHT11 - Failed to retrieve data")

        # Read GPS Module
        latitude, longitude, altitude = read_gps()
        print(f"GPS - Latitude: {latitude} | Longitude: {longitude} | Altitude: {altitude}m")

        print("-" * 50)
        time.sleep(2)  # Delay between readings

# Command line execution
if __name__ == '__main__':
    main()
